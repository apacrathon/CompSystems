/*
 ============================================================================
 Name        : Project.c
 Author      : Raj Patel
 Version     :
 Copyright   : Â© 2017 Apacrathon, All Rights Reserved.
 Description : Hello World in C, Ansi-style
 ============================================================================
 */


#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

#define SHM_SIZE 3 * sizeof(int)  /* 3 integer memory segment size*/

static int32_t NUM_PROCESSES = 5;
/*
 * Functions to read and write to a file.
 */
int32_t write_random_nums(int32_t n, FILE * f);
int32_t read_file(int32_t n, int32_t data[], FILE * f);

/*
 * Arithmetic functions for an array
 */

int32_t sum_of_array(int32_t n, int32_t data[]);
int32_t min_of_array(int32_t n, int32_t data[]);
int32_t max_of_array(int32_t n, int32_t data[]);

/*
 * Functions for each part
 */

int32_t PART_A(int32_t data_size, int32_t data[]);
int32_t PART_B(int32_t data_size, int32_t data[]);
int32_t PART_C(int32_t data_size, int32_t data[]);
int32_t PART_D(int32_t data_size, int32_t data[]);
int32_t PART_EC(int32_t data_size, int32_t data[]);

/*
 * Misc. functions.
 */
void print_array(int32_t data_size, int32_t data[]);

int main(void)
{
	srand(time(NULL));

	FILE * f_write = fopen("random.list", "w");
	FILE * f_read = fopen("random.list", "r");
	int32_t data_size = 100, data[data_size];

	//printf("\nWriting to file...\n");
	write_random_nums(data_size, f_write);
	//printf("Successfully wrote to file...\n");

	//printf("Reading from file...\n");
	read_file(data_size, data, f_read);
	//printf("Successfully read from file...\n");

	PART_A(data_size, data);
	PART_B(data_size, data);
	PART_C(data_size, data);
	PART_D(data_size, data);

	return EXIT_SUCCESS;
}
int32_t PART_A(int32_t data_size, int32_t data[])
{
	pid_t pid = getpid();
	pid_t ppid = getppid();

	printf("Running Part A...\n\n");
	printf("Hi, I'm process %d, and my parent is %d.\n", pid, ppid);
	printf("The maximum value is: %d\n", max_of_array(data_size, data));
	printf("The minimum value is: %d\n", min_of_array(data_size, data));
	printf("The sum of the array is: %d\n", sum_of_array(data_size, data));
	return 0;
}

int32_t PART_B(int32_t data_size, int32_t data[])
{
	printf("\n-------------------Running Part B-------------------\n");

	int num_processes = 5;

	pid_t pid;
	pid = fork ();
	if (pid != 0)
	{
		printf ("Hi I'm process %d and my parent is %d.\n",getpid (), getppid ());

	}
	else
	{
		printf ("Hi I'm process %d and my parent is %d.\n",getpid (), getppid ());
		newFork(0,num_processes - 2);
		sleep(1);
		exit(5);
	}
	sleep(3);
	printf("-------------------Ending Part B-------------------\n");

return 0;
}

int32_t PART_C(int32_t data_size, int32_t data[])
{
	printf("\n-------------------Running Part C-------------------\n");
	/*
	 * min, max, data 	 				used for statistics
	 * num_process, data_per_process  	used for determining number of processes
	 * shmid_write, shmid_read			stores shmids for reading and writing
	 * pipefd 							used to pass data array to children
	 * data_buffer  					used as buffer for pipefd
	 * stats  							shared memory segment for min, max, and sum.
	 */
	int32_t min = data[0], max = data[0], sum = 0,
			num_processes, data_per_process,
			shmid_write, shmid_read;
	int32_t pipefd[2], data_buffer[data_size], * stats;
	key_t key = 1337;

	/*
	 * Get shmid (writing) and attach system to shared segment.
	 * Write inital stats to shared memory.
	 */
	if ((shmid_write = shmget (key, SHM_SIZE, IPC_CREAT)) == -1) { perror("shmget :failed"); exit(1); }
	else { /*(void) fprintf(stderr, "shmget: returned %d\n", shmid_write);*/ }
	stats = (int *) shmat(shmid_write, NULL, 0);
	stats[0] = min, stats[1] = max, stats[2] = sum;

	// Used to determine process/work division
	data_per_process = data_size / NUM_PROCESSES;

	// Create pipe, send data array from parent end, and close the parent write end.
	if (pipe(pipefd) == -1) { printf("Error creating pipe."); exit(1); }
	write(pipefd[1], data, data_size*sizeof(int));
	close(pipefd[1]);

	// Spawn num_processes processes for the parent process.
	for (int i = 0; i < NUM_PROCESSES; i++)
	{
		pid_t pid = fork();
		if (pid > 0)	// in parent
		{
			int dummy;
			wait(&dummy);		// wait for the child to finish
		}
		else if (pid == 0)		// in child
		{
			printf("Hi, I'm process %d, and my parent is %d\n", getpid(), getppid());
			read(pipefd[0], data_buffer, data_per_process*sizeof(int));

			/*
			 * Get shmid (reading) and attach system to shared segment.
			 * Read current stats from shared memory.
			 */
			if ((shmid_read = shmget (key, SHM_SIZE, IPC_EXCL)) == -1) { perror("shmget: shmget failed"); exit(1); }
			else { /*(void) fprintf(stderr, "shmget: shmget returned %d\n", shmid_read);*/ }
			stats = (int *) shmat(shmid_read, NULL, SHM_RDONLY);
			min = stats[0], max = stats[1], sum = stats[2];

			// Have the child check its assigned chunk of data to see if there is a new min/max, and update the sum
			for (int j = 0; j < data_per_process; j++)
			{
				if (min > data_buffer[j]) { min = data_buffer[j]; }
				if (max < data_buffer[j]) { max = data_buffer[j]; }
				sum += data_buffer[j];
			}

			/*
			 * Get shmid (writing) and attach system to shared segment.
			 * Write updated stats to shared memory.
			 */
			if ((shmid_write = shmget (key, SHM_SIZE, IPC_CREAT)) == -1) { perror("shmget: shmget failed"); exit(1); }
			else { /*(void) fprintf(stderr, "shmget: shmget returned %d\n", shmid_write);*/ }
			stats = (int *) shmat(shmid_write, NULL, 0);
			stats[0] = min, stats[1] = max, stats[2] = sum;

			exit(0);
		}
		else { printf("fork error\n"); return -1; }
	}

	printf("Max = %d\nMin = %d\nSum = %d\n", stats[0], stats[1], stats[2]);
	shmdt((void *) stats);

	printf("-------------------Ending Part B-------------------\n");
	return 0;
}

int32_t PART_D(int32_t data_size, int32_t data[])
{
	printf("-------------------Running Part D-------------------\n");
	int num_processes = 1;
	printf("Hi I'm process %d, and my parent is %d.\n", getpid(),getppid());
	for (int i = 0; i <= num_processes; i++)
	{
			pid_t pid = fork();

			if (pid > 0)
			{
			}
			else if (pid == 0)
			{
				printf("Hi I'm process %d, and my parent is %d.\n", getpid(),getppid());
				newFork1(0,1);
				sleep(2);
				exit(5);
			}
			else { printf("fork error\n"); return -1; }
	}
	return 1;
}

int32_t write_random_nums(int32_t n, FILE * f)
{

	int32_t result = 0;

	if (f == NULL)
	{
	    printf("Error opening file!\n");
	    exit(1);
	}

	for (int count = 0; count < n; count++)
	{
		fprintf(f, "%d\n", (rand() % 100));
	}

	result = fclose(f);

	return result;
}

int32_t read_file(int32_t n, int32_t data[], FILE * f)
{
	int32_t result = 0;

	if (f == NULL)
	{
	    printf("Error opening file!\n");
	    return 1;
	}

	for (int i = 0; i < n; i++)
	{
		fscanf(f, "%d", &data[i]);
	}

	result = fclose(f);

	return result;
}

int32_t sum_of_array(int32_t n, int32_t data[])
{
	int sum = 0;

	for (int i = 0; i < n; i++)
	{
		sum += data[i];
	}

	return sum;
}

int32_t min_of_array(int32_t n, int32_t data[])
{
	int min = data[0];

	for (int i = 1; i < n; i++)
	{
		if (min > data[i]) { min = data[i]; }
	}

	return min;
}

int32_t max_of_array(int32_t n, int32_t data[])
{
	int min = data[0];

	for (int i = 1; i < n; i++)
	{
		if (min < data[i]) { min = data[i]; }
	}

	return min;
}

void print_array(int32_t n, int32_t data[])
{
	for (int32_t i = 0; i < n; i++)
	{
		printf("%d\n", data[i]);
	}
}

void newFork(int i,int n)
{

	if(i >= n){
		return;
	}
	pid_t pid = fork();
	if(pid != 0)
	{		}
	else
	{
		printf ("Hi I'm process %d and my parent is %d.\n",getpid (), getppid ());
		i++;
		newFork(i,n);
	}
}

void newFork1(int i,int n)
{

	if(i >= n){
		return;
	}
	pid_t pid = fork();
	if(pid != 0)
	{		}
	else
	{
		printf ("\tHi I'm process %d and my parent is %d.\n",getpid (), getppid ());
		i++;
		newFork1(i,n);
	}
}
